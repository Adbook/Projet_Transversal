C51 COMPILER V9.52.0.0   DECODAGE_COMMANDE                                                 03/29/2017 09:52:01 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE DECODAGE_COMMANDE
OBJECT MODULE PLACED IN decodage_commande.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE decodage_commande.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "struct.h"
   2          #include <string.h>
   3          #include <stdio.h>
   4          #include <stdlib.h>
   5          #include <intrins.h>
   6          #include "serial_io.h"
   7          #include <c8051f020.h>
   8          
   9          #include "decodage_commande.h"
  10          
  11          xdata char jetons[NB_PARAM_MAX+1][10];
  12          xdata Commande c;
  13          void diviser_chaine(char *commande){
  14   1      
  15   1              char *tok = 1;
  16   1              int i = 0;
  17   1              tok = strtok(commande, " \r");
  18   1              
  19   1              while(tok != NULL){
  20   2                      strcpy(jetons[i],tok);
  21   2                      tok = strtok(NULL, " \r");
  22   2                      i++;
  23   2                      if(i >= 9)
  24   2                              break;//erreur: trop de parametres (max: 30)
  25   2              }
  26   1      }
  27          
  28          char valider_commande(char **jetons, int nb_jetons){
  29   1      
  30   1              int taille_dernier_jeton = strlen(jetons[nb_jetons-1]);
  31   1              char test = jetons[nb_jetons-1][taille_dernier_jeton-1];
  32   1              EA = 1;
  33   1              if(jetons[nb_jetons-1][taille_dernier_jeton-1] != '\r')
  34   1                      return false;
  35   1              
  36   1              return true;
  37   1              
  38   1              
  39   1      }
  40          
  41          
  42          
  43          
  44          void decoder_commande(char *commande){
  45   1              int nb_jetons = 0;
  46   1              int i = 0;
  47   1              char ret;
  48   1              
  49   1              for(i = 0; i < NB_PARAM_MAX + 1; i++){
  50   2                      jetons[i][0] = '\0';
  51   2              }
  52   1              
  53   1              diviser_chaine(commande);
  54   1              
  55   1              while(jetons[nb_jetons][0] != '\0' && jetons[nb_jetons][0] != '\r') //comptage du nombre de jetons
C51 COMPILER V9.52.0.0   DECODAGE_COMMANDE                                                 03/29/2017 09:52:01 PAGE 2   

  56   1                      nb_jetons++;
  57   1              
  58   1              ret = valider_commande(jetons, nb_jetons);
*** WARNING C182 IN LINE 58 OF decodage_commande.c: pointer to different objects
  59   1              
  60   1              
  61   1              c.nom_commande = jetons[0];
  62   1              
  63   1              //DEBUG
  64   1              /*serOutstring("nom_commande:\n");
  65   1              serOutstring(c.nom_commande);
  66   1              serOutstring("\n");
  67   1              serOutstring("nom_param:\n");*/
  68   1              
  69   1              c.nb_parametres = nb_jetons - 1;
  70   1              
  71   1              
  72   1              
  73   1              
  74   1              
  75   1              for(i = 1; i < nb_jetons; i++){
  76   2                      
  77   2                      //DEBUG
  78   2                      /*serOutstring(jetons[i]);
  79   2                      serOutstring("\n");*/
  80   2                      
  81   2                      c.parametres[i-1].valeur = jetons[i];
  82   2                      c.parametres[i-1].nb = i-1;
  83   2              }
  84   1              
  85   1              traitement_nom_commande(&c);
  86   1              
  87   1      }
  88          
  89          void traitement_nom_commande(Commande *c2)
  90          {
  91   1              
  92   1              xdata char *nom = c.nom_commande;
  93   1              Commande_generale general;
  94   1              Commande_mouvement mouv;// {ARRET, AVANCER, RECULER, ARRET_URGENCE, STOPPER, ROT_90_G, ROT_90_D, ROT_180_
             -G, ROT_180_D, ROT_ANGLE  } Commande_mouvement;
  95   1              Commande_information info;
  96   1              xdata unsigned int i = 0;
  97   1      
  98   1              
  99   1              if(strcmp(nom, "D") == 0){ //debut de l'epreuve
 100   2                      char* test = c.parametres[1].valeur;
 101   2                      
 102   2              }else if(strcmp(nom, "E") == 0){ //fin de l'epreuve
 103   2                      
 104   2              }else if(strcmp(nom, "Q") == 0){ //arret d'urgence
 105   2                      
 106   2              }else if(strcmp(nom, "TV") == 0){ //vitesse
 107   2                      
 108   2              }else if(strcmp(nom, "A") == 0){ //avancer
 109   2                      Send_String("mogo test test test\r\n");
 110   2              }else if(strcmp(nom, "B") == 0){ //reculer
 111   2                      
 112   2              }else if(strcmp(nom, "S") == 0){ //stop
 113   2                      
 114   2              }else if(strcmp(nom, "RD") == 0){ //rota droite 90
 115   2                      Send_String("mogo 1:45\r\n");
C51 COMPILER V9.52.0.0   DECODAGE_COMMANDE                                                 03/29/2017 09:52:01 PAGE 3   

 116   2              }else if(strcmp(nom, "RG") == 0){ //rota gauche 90
 117   2                      
 118   2              }else if(strcmp(nom, "RC") == 0){ //rota 180
 119   2                      
 120   2              }else if(strcmp(nom, "RA") == 0){ //rota angle
 121   2                      i = 1;
 122   2              }else if(strcmp(nom, "G") == 0){ //deplacement de la base roulante par coordonnees
 123   2                      
 124   2              }else if(strcmp(nom, "ASS") == 0){ //Acquisition signaux sonores
 125   2                      
 126   2              }else if(strcmp(nom, "MI") == 0){ //mesure courant
 127   2                      
 128   2              }else if(strcmp(nom, "ME") == 0){ //mesure energie
 129   2                      
 130   2              }else if(strcmp(nom, "IPO") == 0){ //initialisation de la position de la base roulante
 131   2                      
 132   2              }else if(strcmp(nom, "POS") == 0){ //position de la base roulante
 133   2                      
 134   2              }else if(strcmp(nom, "MOU") == 0){ //detection d'obstacle unique
 135   2                      
 136   2              }else if(strcmp(nom, "MOB") == 0){ //detection d'obstacle par balayage
 137   2                      
 138   2              }else if(strcmp(nom, "SD") == 0){ //generation de signaux sonore
 139   2                      
 140   2              }else if(strcmp(nom, "L") == 0){ //allumage du pointeur lumineux
 141   2              
 142   2              } else if(strcmp(nom, "LS") == 0){ //fin de l'allumage du pointeur lumineux
 143   2                      
 144   2              }else if(strcmp(nom, "CS") == 0){ //pilotage de servomoteur
 145   2                      
 146   2              }else if(strcmp(nom, "PPH") == 0){ //prise de photo
 147   2                      
 148   2              }else if(strcmp(nom, "SPH") == 0){ //fin prise de photo en continu
 149   2                      
 150   2              }else if(strcmp(nom, "AUX") == 0){
 151   2                      
 152   2              }else{ //commande non supportée
 153   2                      i = 1;
 154   2                      serOutchar('#');
 155   2              }
 156   1              
 157   1              
 158   1              if(i == 0)serOutchar('\r');
 159   1              if(i == 0)serOutchar('>');
 160   1      }
*** WARNING C280 IN LINE 89 OF decodage_commande.c: 'c2': unreferenced local variable
*** WARNING C280 IN LINE 93 OF decodage_commande.c: 'general': unreferenced local variable
*** WARNING C280 IN LINE 94 OF decodage_commande.c: 'mouv': unreferenced local variable
*** WARNING C280 IN LINE 95 OF decodage_commande.c: 'info': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1353    ----
   CONSTANT SIZE    =    115    ----
   XDATA SIZE       =    240       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  5 WARNING(S),  0 ERROR(S)
